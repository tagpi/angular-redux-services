{
  "version": 3,
  "file": "angular-redux-services.js",
  "sources": [
    "ng://angular-redux-services/out/decorator/rx-epic.decorator.ts",
    "ng://angular-redux-services/out/decorator/rx-action.decorator.ts",
    "ng://angular-redux-services/out/redux.module.ts",
    "ng://angular-redux-services/out/pipe/rx-state.pipe.ts",
    "ng://angular-redux-services/out/service/redux.service.ts",
    "ng://angular-redux-services/out/class/map-manager.class.ts",
    "ng://angular-redux-services/out/class/subscriber-manager.class.ts"
  ],
  "sourcesContent": [
    "/**\n * Configure an epic.\n * @param action The action name to create the epic on.\n * @epic(action) fnName(payload) {\n *  return Observable.of({\n *    type: `${SearchExampleService.path}.setResults`,\n *    payload: [ 1, 2, 3 ]\n  * });\n * }\n */\nexport function rxEpic(action: string) {\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    target[propertyKey]['__rx__'] = target['__rx__'] || {};\n    target[propertyKey]['__rx__'].epic = {\n      action: `${action}`,\n    };\n  };\n}\n\n",
    "/**\n * Configure a action for the state slice. The state and payload\n * parameters has been deep cloned. This output will be the parameter\n * state. It will not read the return output.\n * @param useOpenReducer Truthy to use traditional redux pattern.\n * @Action(useOpenReducer) fnName(payload: T) {\n *   return (state: State, action: Action) => {\n *     state.param1 = action.payload.param1;\n *     state.param2 = action.payload.param2;\n *   };\n * }\n */\nexport function rxAction(useOpenReducer = false) {\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    target[propertyKey]['__rx__'] = target['__rx__'] || {};\n    target[propertyKey]['__rx__'].action = {\n      name: `${propertyKey}`,\n      useOpenReducer\n    };\n  };\n}\n\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReduxService } from './service/redux.service';\nimport { RxStatePipe } from './pipe/rx-state.pipe';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ RxStatePipe ],\n  exports: [ RxStatePipe ],\n})\nexport class ReduxModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ReduxModule,\n      providers: [ ReduxService ]\n    };\n  }\n\n}\n",
    "import { AsyncPipe } from '@angular/common';\nimport { Pipe, PipeTransform, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { ReduxService } from '../service/redux.service';\n\n@Pipe({\n  name: 'rxState',\n  pure: false\n})\nexport class RxStatePipe implements PipeTransform, OnDestroy {\n\n  async: AsyncPipe;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef, private reduxService: ReduxService) {\n    this.async = new AsyncPipe(this.changeDetectorRef);\n  }\n\n  transform(value: string): any {\n    return this.async.transform(this.reduxService.select(value));\n  }\n\n  ngOnDestroy () {\n    this.async.ngOnDestroy();\n  }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { combineReducers, createStore, Store, compose, applyMiddleware } from 'redux';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { SubscriberManger } from '../class/subscriber-manager.class';\nimport { MapManager } from '../class/map-manager.class';\nimport { Action } from '../model/action.model';\n\n@Injectable()\nexport class ReduxService {\n\n  public isInitialized = false;\n\n  /**\n   * Redux store.\n   */\n  private store: Store<any>;\n\n  /**\n   * Reducer list.\n   */\n  private reducers: any = {\n    '@redux-service': (state = {}, action) => action\n  };\n\n  /**\n   * Manages state sices into observables.\n   */\n  private subscriber: SubscriberManger;\n\n  /**\n   * Applies redux maps into the redux pattern.\n   */\n  private map: MapManager;\n\n\n  constructor() {\n    this.subscriber = new SubscriberManger(() => this.getState());\n    this.map = new MapManager();\n  }\n\n  /**\n   * Initializes the redux service\n   * @param preloadedState Initial state\n   * @param epics Global epics using redux-observables\n   * @param isProduction Adds devtools if non production\n   */\n  public init(preloadedState = {}, middleware = [], isProduction = false) {\n\n    // middleware\n    const composeMiddleware = (!isProduction && window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__']) || compose;\n    const loadedMiddleware = composeMiddleware(applyMiddleware(\n      ...middleware,\n      this.subscriber.createMiddleware()\n    ));\n\n    // create store\n    this.store = createStore(\n      combineReducers(this.reducers),\n      preloadedState,\n      loadedMiddleware\n    );\n\n    // service has been initialized\n    this.isInitialized = true;\n\n    // initialize map with newly created store\n    this.map.init(this);\n\n  }\n\n  /**\n   * Add a reducer.\n   * @param name Root path for the reducer (@search)\n   * @param reducer Reducer method (state, action) => state\n   */\n  public addReducer(name, reducer) {\n    this.reducers[name] = reducer;\n    this.store.replaceReducer(combineReducers(this.reducers));\n  }\n\n  /**\n   * Add a redux map.\n   * @param serviceInstance\n   */\n  public addMap(serviceInstance: any) {\n    this.map.add(this, serviceInstance);\n  }\n\n  /**\n   * Return the current state.\n   */\n  public getState(): any {\n    return this.store.getState();\n  }\n\n  /**\n   * Dispact an action.\n   * @param action\n   */\n  public dispatch(action: Action) {\n    this.store.dispatch(action);\n    this.map.safeDispatch(this, action);\n  }\n\n  /**\n   * Subscribe to a state slice\n   * @param path\n   */\n  public select<T>(path: string): BehaviorSubject<T> {\n    return this.subscriber.select(path);\n  }\n\n\n\n}\n",
    "import { get, cloneDeep } from 'lodash';\nimport { ReduxService } from '../service/redux.service';\nimport { Action } from '../model/action.model';\nimport { take } from 'rxjs/operators';\n\nexport class MapManager {\n\n  /**\n   * Tracks the loaded services\n   */\n  private loaded: string[] = [];\n\n  /**\n   * Safe epic list. Only gets triggered when dispatched through this service.\n   * For global triggered epics, Use redux-observable via epics param in the\n   * init function.\n   */\n  private epic: { actionType?: any } = { };\n\n  /**\n   * Tracks added services prior to store initialization.\n   */\n  private initQueue: any[] = [];\n\n  /**\n   * Process queued services\n   * @param reduxService\n   */\n  public init(reduxService: ReduxService) {\n    while (this.initQueue.length) {\n      const serviceInstance = this.initQueue.shift();\n      this.add(reduxService, serviceInstance);\n    }\n  }\n\n  /**\n   * Add a redux map service class instance.\n   * @param reduxService Redux service that will consume it\n   * @param serviceInstance Service instance of the class\n   */\n  public add(reduxService: ReduxService, serviceInstance: any) {\n\n    const serviceName = serviceInstance.constructor.name;\n\n    // check if redux service is initialized\n    if (!reduxService.isInitialized) {\n      this.initQueue.push(serviceInstance);\n      return;\n    }\n\n    // identify path\n    const path = serviceInstance.constructor.path;\n    if (!path) {\n      console.error('Redux map static path not found for', serviceName);\n      return;\n    }\n\n    // check for duplicate\n    if (this.loaded.find(item => item === path)) {\n      console.warn('Attempted to load duplicate path', path);\n      return;\n    }\n    this.loaded.push(path);\n\n    // identify properties\n    this.identify(reduxService, serviceInstance);\n\n  }\n\n  /**\n   * Convert the map to the redux flow\n   * @param reduxService\n   * @param serviceInstance\n   */\n  private identify(reduxService: ReduxService, serviceInstance: any) {\n\n    const reducer = {};\n\n    // identify parts\n    const keys = Object.getOwnPropertyNames(serviceInstance.constructor.prototype);\n    if (keys && keys.length) {\n      keys.forEach(propertyName => {\n        const rx = get(serviceInstance.constructor.prototype[propertyName], `prototype.constructor.__rx__`);\n        if (rx) {\n          if (rx.epic) {\n            this.addEpic(reduxService, serviceInstance, propertyName, rx.epic);\n          }\n          if (rx.action) {\n            this.addAction(reduxService, serviceInstance, propertyName, rx.action, reducer);\n          }\n        }\n      });\n    }\n\n    // finalize reducer\n    if (Object.keys(reducer).length) {\n      this.addReducer(reduxService, serviceInstance, reducer);\n    }\n\n  }\n\n  /**\n   * Add an epic\n   */\n  private addEpic(reduxService: ReduxService, serviceInstance: any, propertyName: string, epic: any) {\n    const actionName = `${serviceInstance.constructor.path}.${epic.action}`;\n    const list = this.epic[actionName] = this.epic[actionName] || [];\n    list.push((action: Action) => serviceInstance[propertyName](action));\n  }\n\n  private addAction(reduxService: ReduxService, serviceInstance: any, propertyName: string, action: any, reducer: any) {\n    const actionName = `${serviceInstance.constructor.path}.${propertyName}`;\n    const fn = serviceInstance[propertyName]();\n    fn.useOpenReducer = !!action.useOpenReducer;\n    reducer[actionName] = fn;\n    serviceInstance[propertyName] = (payload: any) => {\n      reduxService.dispatch({ type: actionName, payload });\n    };\n  }\n\n  /**\n   * Add a reducer.\n   */\n  private addReducer(reduxService: ReduxService, serviceInstance: any, reducer: any) {\n    const path = serviceInstance.constructor.path;\n    const initial = serviceInstance.constructor.initial || {};\n    const reducerMethod = (state: any = initial, action: Action) => {\n      const op = reducer[action.type];\n      if (!op) { return state; }\n      if (op.useOpenReducer) { return op(state, action); }\n\n      const newState = cloneDeep(state);\n      const payload = cloneDeep(action);\n      op(newState, payload);\n      return newState;\n\n    };\n    reduxService.addReducer(path, reducerMethod);\n  }\n\n  /**\n   * Trigger the safe epics.\n   * @param action\n   */\n  public safeDispatch(reduxService: ReduxService, action: Action) {\n\n    if (!action || !action.type) {\n      console.warn('Redux safe dispatch called without action');\n      return;\n    }\n\n    const epics = this.epic[action.type];\n    if (epics) {\n      epics.forEach(epic => epic(action.payload)\n        .pipe(take(1))\n        .subscribe(reply => reduxService.dispatch(reply))\n      );\n    }\n\n  }\n\n}\n",
    "import { BehaviorSubject } from 'rxjs';\nimport { get, isEqual } from 'lodash';\n\nexport class SubscriberManger {\n\n  /**\n   * Tracks the active selections.\n   */\n  private selections: { path?: BehaviorSubject<any> } = { };\n\n  /**\n   * Create a subscriber manager\n   * @param getState method that returns the full state;\n   */\n  constructor(private getState: () => any) {\n\n  }\n\n  /**\n   * Get an observable for the state slice.\n   * @param path\n   */\n  public select<T>(path: string): BehaviorSubject<T> {\n    const sub = this.selections[path];\n    if (sub) { return sub; }\n\n    const value = get(this.getState(), path);\n    const subj = new BehaviorSubject(value);\n    this.selections[path] = subj;\n    return subj;\n  }\n\n  /**\n   * Return the subscriber middleware.\n   */\n  public createMiddleware() {\n    return store => next => action => {\n      const result = next(action);\n      this.broadcast(this.getState());\n      return result;\n    };\n  }\n\n  /**\n   * Update all tracked observers.\n   * @param state\n   */\n  private broadcast(state) {\n    if (!this.selections) { return; }\n\n    const keys = Object.keys(this.selections);\n    for (let i = keys.length - 1; i > -1; i--) {\n      const path = keys[i];\n      const subject = this.selections[path];\n      const stateValue = get(state, path);\n      if (!isEqual(stateValue, subject.getValue())) {\n        subject.next(stateValue);\n      }\n\n    }\n  }\n\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
