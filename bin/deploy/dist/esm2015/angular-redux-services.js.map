{
  "version": 3,
  "file": "angular-redux-services.js",
  "sources": [
    "ng://angular-redux-services/out/decorator/rx-epic.decorator.ts",
    "ng://angular-redux-services/out/decorator/rx-action.decorator.ts",
    "ng://angular-redux-services/out/redux.module.ts",
    "ng://angular-redux-services/out/pipe/rx-state.pipe.ts",
    "ng://angular-redux-services/out/service/redux.service.ts",
    "ng://angular-redux-services/out/class/map-manager.class.ts",
    "ng://angular-redux-services/out/class/subscriber-manager.class.ts",
    "ng://angular-redux-services/out/class/redux-subject.class.ts"
  ],
  "sourcesContent": [
    "/**\n * Configure an epic.\n * @param source The action name to create the epic on.\n * @param relay The action name to call once the epic completes.\n * @epic(source, relay) fnName(payload) {\n *  return Observable.of([ 1, 2, 3 ]);\n * }\n */\nexport function rxEpic(source: string, relay?: string) {\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    target[propertyKey]['__rx__'] = target['__rx__'] || {};\n    target[propertyKey]['__rx__'].epic = { source, relay };\n  };\n}\n\n",
    "/**\n * Configure a action for the state slice. The state and payload\n * parameters has been deep cloned. This output will be the parameter\n * state. It will not read the return output.\n * @param useOpenAction Truthy to use traditional redux pattern and full dispatched action.\n * @Action(useOpenReducer) fnName(payload: T) {\n *   return (state: State, action: Action) => {\n *     state.param1 = action.payload.param1;\n *     state.param2 = action.payload.param2;\n *   };\n * }\n */\nexport function rxAction(useOpenAction = false, useCompleteAction = false) {\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    target[propertyKey]['__rx__'] = target['__rx__'] || {};\n    target[propertyKey]['__rx__'].action = {\n      name: `${propertyKey}`,\n      useOpenAction\n    };\n  };\n}\n\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReduxService } from './service/redux.service';\nimport { RxStatePipe } from './pipe/rx-state.pipe';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ RxStatePipe ],\n  exports: [ RxStatePipe ],\n})\nexport class ReduxModule {\n\n}\n",
    "import { AsyncPipe } from '@angular/common';\nimport { Pipe, PipeTransform, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { ReduxService } from '../service/redux.service';\n\n@Pipe({\n  name: 'rxState',\n  pure: false\n})\nexport class RxStatePipe implements PipeTransform, OnDestroy {\n\n  async: AsyncPipe;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef, private reduxService: ReduxService) {\n    this.async = new AsyncPipe(this.changeDetectorRef);\n  }\n\n  transform(value: string): any {\n    return this.async.transform(this.reduxService.select(value));\n  }\n\n  ngOnDestroy () {\n    this.async.ngOnDestroy();\n  }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { combineReducers, createStore, Store, compose, applyMiddleware } from 'redux';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { SubscriberManger } from '../class/subscriber-manager.class';\nimport { MapManager } from '../class/map-manager.class';\nimport { Action } from '../model/action.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ReduxService {\n\n  public isInitialized = false;\n\n  /**\n   * Redux store.\n   */\n  private store: Store<any>;\n\n  /**\n   * Reducer list.\n   */\n  private reducers: any = {\n    '@redux-service': (state = {}, action) => action.type\n  };\n\n  /**\n   * Manages state sices into observables.\n   */\n  private subscriber: SubscriberManger;\n\n  /**\n   * Applies redux maps into the redux pattern.\n   */\n  private map: MapManager;\n\n\n  constructor() {\n    this.subscriber = new SubscriberManger(() => this.getState());\n    this.map = new MapManager();\n  }\n\n  /**\n   * Initializes the redux service\n   * @param preloadedState Initial state\n   * @param epics Global epics using redux-observables\n   * @param isProduction Adds devtools if non production\n   */\n  public init(preloadedState = {}, middleware = [], isProduction = false) {\n\n    // middleware\n    const composeMiddleware = (!isProduction && window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__']) || compose;\n    const loadedMiddleware = composeMiddleware(applyMiddleware(\n      ...middleware,\n      this.subscriber.createMiddleware()\n    ));\n\n    // create store\n    this.store = createStore(\n      combineReducers(this.reducers),\n      preloadedState,\n      loadedMiddleware\n    );\n\n    // service has been initialized\n    this.isInitialized = true;\n\n    // initialize map with newly created store\n    this.map.init(this);\n\n  }\n\n  /**\n   * Add a reducer.\n   * @param name Root path for the reducer (@search)\n   * @param reducer Reducer method (state, action) => state\n   */\n  public add(name, reducer) {\n    this.reducers[name] = reducer;\n    this.store.replaceReducer(combineReducers(this.reducers));\n  }\n\n  /**\n   * Registers a redux service instance.\n   * @param serviceInstance\n   */\n  public register(serviceInstance: any) {\n    this.map.add(this, serviceInstance);\n  }\n\n  /**\n   * Return the current state.\n   */\n  public getState(): any {\n    return this.store.getState();\n  }\n\n  /**\n   * Dispact an action.\n   * @param action\n   */\n  public dispatch(action: Action) {\n    this.store.dispatch(action);\n    this.map.safeDispatch(this, action);\n  }\n\n  /**\n   * Subscribe to a state slice\n   * @param path\n   */\n  public select<T>(path: string): BehaviorSubject<T> {\n    return this.subscriber.select(path);\n  }\n\n\n\n}\n",
    "import { get, cloneDeep } from 'lodash';\nimport { ReduxService } from '../service/redux.service';\nimport { Action } from '../model/action.model';\nimport { take, map } from 'rxjs/operators';\n\nexport class MapManager {\n\n  /**\n   * Tracks the loaded services\n   */\n  private loaded: { [path: string]: any } = {};\n\n  /**\n   * Safe epic list. Only gets triggered when dispatched through this service.\n   * For global triggered epics, Use redux-observable via epics param in the\n   * init function.\n   */\n  private epic: { actionType?: any } = { };\n\n  /**\n   * Tracks added services prior to store initialization.\n   */\n  private initQueue: any[] = [];\n\n  /**\n   * Process queued services\n   * @param reduxService\n   */\n  public init(reduxService: ReduxService) {\n    while (this.initQueue.length) {\n      const serviceInstance = this.initQueue.shift();\n      this.add(reduxService, serviceInstance);\n    }\n  }\n\n  /**\n   * Add a redux map service class instance.\n   * @param reduxService Redux service that will consume it\n   * @param serviceInstance Service instance of the class\n   */\n  public add(reduxService: ReduxService, serviceInstance: any) {\n\n    const serviceName = serviceInstance.constructor.name;\n\n    // check if redux service is initialized\n    if (!reduxService.isInitialized) {\n      this.initQueue.push(serviceInstance);\n      return;\n    }\n\n    // identify path\n    const path = serviceInstance.constructor.path;\n    if (!path) {\n      console.error('Redux map static path not found for', serviceName);\n      return;\n    }\n\n    // identify properties\n    this.identify(reduxService, serviceInstance);\n\n  }\n\n  /**\n   * Convert the map to the redux flow\n   * @param reduxService\n   * @param serviceInstance\n   */\n  private identify(reduxService: ReduxService, serviceInstance: any) {\n\n    const path = serviceInstance.constructor.path;\n    const reducer = (this.loaded[path] = this.loaded[path] || {});\n\n    // identify parts\n    const keys = Object.getOwnPropertyNames(serviceInstance.constructor.prototype);\n    if (keys && keys.length) {\n      keys.forEach(propertyName => {\n        const rx = get(serviceInstance.constructor.prototype[propertyName], `prototype.constructor.__rx__`);\n        if (rx) {\n          if (rx.epic) {\n            this.addEpic(reduxService, serviceInstance, propertyName, rx.epic);\n          }\n          if (rx.action) {\n            this.addAction(reduxService, serviceInstance, propertyName, rx.action, reducer);\n          }\n        }\n      });\n    }\n\n    // finalize reducer\n    if (Object.keys(reducer).length) {\n      this.addReducer(reduxService, serviceInstance, reducer);\n    }\n\n  }\n\n  /**\n   * Add an epic.\n   */\n  private addEpic(reduxService: ReduxService, serviceInstance: any, propertyName: string, epic: any) {\n\n    const actionName = `${serviceInstance.constructor.path}.${epic.source}`;\n    const list = (this.epic[actionName] = this.epic[actionName] || []);\n    const relay = epic.relay && `${serviceInstance.constructor.path}.${epic.relay}`;\n\n    list.push((action: Action) => {\n\n      let epic$ = serviceInstance[propertyName](action);\n\n      if (relay) {\n        epic$ = epic$.pipe(map(result => ({\n          type: relay,\n          payload: result\n        })));\n      }\n\n      epic$ = epic$.pipe(take(1));\n\n      // run the relay action\n      epic$.subscribe(reply => reduxService.dispatch(reply));\n\n    });\n\n  }\n\n  /**\n   * Add an action\n   */\n  private addAction(reduxService: ReduxService, serviceInstance: any, propertyName: string, action: any, reducer: any) {\n    const actionName = `${serviceInstance.constructor.path}.${propertyName}`;\n    const fn = serviceInstance[propertyName]();\n    if (!fn) { return; }\n    fn.useOpenAction = !!action.useOpenAction;\n    reducer[actionName] = fn;\n    serviceInstance[propertyName] = (payload: any) => {\n      reduxService.dispatch({ type: actionName, payload });\n    };\n  }\n\n  /**\n   * Add a reducer.\n   */\n  private addReducer(reduxService: ReduxService, serviceInstance: any, reducer: any) {\n    const path = serviceInstance.constructor.path;\n    const initial = serviceInstance.constructor.initial || {};\n    const reducerMethod = (state: any = initial, action: Action) => {\n      const op = reducer[action.type];\n      if (!op) { return state; }\n      if (op.useOpenAction) { return op(state, action); }\n\n      const newState = cloneDeep(state);\n      const payload = cloneDeep(action.payload);\n      op(newState, payload);\n      return newState;\n\n    };\n    reduxService.add(path, reducerMethod);\n  }\n\n  /**\n   * Trigger the safe epics.\n   * @param action\n   */\n  public safeDispatch(reduxService: ReduxService, action: Action) {\n\n    if (!action || !action.type) {\n      console.warn('Redux safe dispatch called without action');\n      return;\n    }\n\n    const epics = this.epic[action.type];\n    if (epics) {\n      epics.forEach(epicWrapper => epicWrapper());\n    }\n\n  }\n\n}\n",
    "import { BehaviorSubject, Subscription } from 'rxjs';\nimport { get, isEqual } from 'lodash';\nimport { ReduxSubject } from './redux-subject.class';\n\nexport class SubscriberManger {\n\n  /**\n   * Tracks the active selections. Each subject gets updated\n   * when broadcast is called.\n   */\n  private selections: { path?: BehaviorSubject<any> } = { };\n\n  /**\n   * Create a subscriber manager\n   * @param getState method that returns the full state;\n   */\n  constructor(private getState: () => any) {\n\n  }\n\n  /**\n   * Returns a redux observable for the state slice.\n   * @param path\n   */\n  public select<T>(path: string): BehaviorSubject<T> {\n\n    let sliceSub: Subscription;\n    const slice = this.setSlice<T>(path);\n\n    const onActivate = () => {\n      slice.links++;\n      sliceSub = slice.subscribe((reply: T) => reduxSubject.next(reply));\n    };\n\n    const onDeactivate = () => {\n      sliceSub.unsubscribe();\n      slice.links--;\n      if (!slice.links) {\n        this.removeSlice(path);\n      }\n    };\n\n    const reduxSubject = new ReduxSubject<T>(slice.value, onActivate, onDeactivate);\n    return reduxSubject;\n\n  }\n\n  /**\n   * Sets the state slice.\n   * @param path\n   */\n  private setSlice<T>(path: string): BehaviorSubject<T> & { links?: number } {\n    const sub = this.selections[path];\n    if (sub) { return sub; }\n\n    const value = get(this.getState(), path);\n    const slice: BehaviorSubject<T> & { links?: number } = new BehaviorSubject(value);\n    slice.links = 0;\n\n    this.selections[path] = slice;\n    return slice;\n  }\n\n  /**\n   * Clear the slice.\n   * @param path\n   */\n  private removeSlice(path: string) {\n    delete this.selections[path];\n  }\n\n  /**\n   * Return the subscriber middleware.\n   */\n  public createMiddleware() {\n    return store => next => action => {\n      const result = next(action);\n      this.broadcast(this.getState());\n      return result;\n    };\n  }\n\n  /**\n   * Update all tracked observers.\n   * @param state\n   */\n  private broadcast(state) {\n    if (!this.selections) { return; }\n\n    const keys = Object.keys(this.selections);\n    for (let i = keys.length - 1; i > -1; i--) {\n      const path = keys[i];\n      const subject = this.selections[path];\n      const stateValue = get(state, path);\n      if (!isEqual(stateValue, subject.getValue())) {\n        subject.next(stateValue);\n      }\n    }\n\n  }\n\n}\n",
    "import { BehaviorSubject, PartialObserver, Subscription } from 'rxjs';\nimport { baseDirectiveCreate } from '@angular/core/src/render3/instructions';\n\nexport class ReduxSubject<T> extends BehaviorSubject<T> {\n\n  private active = 0;\n\n  constructor(\n    defaultValue: any,\n    private onActivate: () => void,\n    private onDeactivate: () => void) {\n\n    super(defaultValue);\n\n  }\n\n  subscribe(): Subscription {\n\n    // link to\n    if (this.active === 0) {\n      this.onActivate();\n    }\n\n    // track the number of subscriptions\n    this.active++;\n\n    // override unsubscribe\n    const subscription = super.subscribe(...Array.prototype.slice.call(arguments));\n    const originalUnsub = subscription.unsubscribe.bind(subscription);\n    subscription.unsubscribe = () => {\n      this.active--;\n\n      // start deactivation when there are no subscriptions\n      if (!this.active) {\n        this.onDeactivate();\n      }\n\n      originalUnsub();\n    };\n\n    return subscription;\n\n  }\n\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
