{"version":3,"file":"map-manager.class.js","sourceRoot":"","sources":["map-manager.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { get, cloneDeep } from 'lodash';\nimport { ReduxService } from '../service/redux.service';\nimport { Action } from '../model/action.model';\nimport { take } from 'rxjs/operators';\n\nexport class MapManager {\n\n  /**\n   * Tracks the loaded services\n   */\n  private loaded: { [path: string]: any } = {};\n\n  /**\n   * Safe epic list. Only gets triggered when dispatched through this service.\n   * For global triggered epics, Use redux-observable via epics param in the\n   * init function.\n   */\n  private epic: { actionType?: any } = { };\n\n  /**\n   * Tracks added services prior to store initialization.\n   */\n  private initQueue: any[] = [];\n\n  /**\n   * Process queued services\n   * @param reduxService\n   */\n  public init(reduxService: ReduxService) {\n    while (this.initQueue.length) {\n      const serviceInstance = this.initQueue.shift();\n      this.add(reduxService, serviceInstance);\n    }\n  }\n\n  /**\n   * Add a redux map service class instance.\n   * @param reduxService Redux service that will consume it\n   * @param serviceInstance Service instance of the class\n   */\n  public add(reduxService: ReduxService, serviceInstance: any) {\n\n    const serviceName = serviceInstance.constructor.name;\n\n    // check if redux service is initialized\n    if (!reduxService.isInitialized) {\n      this.initQueue.push(serviceInstance);\n      return;\n    }\n\n    // identify path\n    const path = serviceInstance.constructor.path;\n    if (!path) {\n      console.error('Redux map static path not found for', serviceName);\n      return;\n    }\n\n    // identify properties\n    this.identify(reduxService, serviceInstance);\n\n  }\n\n  /**\n   * Convert the map to the redux flow\n   * @param reduxService\n   * @param serviceInstance\n   */\n  private identify(reduxService: ReduxService, serviceInstance: any) {\n\n    const path = serviceInstance.constructor.path;\n    const reducer = (this.loaded[path] = this.loaded[path] || {});\n\n    // identify parts\n    const keys = Object.getOwnPropertyNames(serviceInstance.constructor.prototype);\n    if (keys && keys.length) {\n      keys.forEach(propertyName => {\n        const rx = get(serviceInstance.constructor.prototype[propertyName], `prototype.constructor.__rx__`);\n        if (rx) {\n          if (rx.epic) {\n            this.addEpic(reduxService, serviceInstance, propertyName, rx.epic);\n          }\n          if (rx.action) {\n            this.addAction(reduxService, serviceInstance, propertyName, rx.action, reducer);\n          }\n        }\n      });\n    }\n\n    // finalize reducer\n    if (Object.keys(reducer).length) {\n      this.addReducer(reduxService, serviceInstance, reducer);\n    }\n\n  }\n\n  /**\n   * Add an epic.\n   */\n  private addEpic(reduxService: ReduxService, serviceInstance: any, propertyName: string, epic: any) {\n    const actionName = `${serviceInstance.constructor.path}.${epic.action}`;\n    const list = this.epic[actionName] = this.epic[actionName] || [];\n    list.push((action: Action) => serviceInstance[propertyName](action));\n  }\n\n  private addAction(reduxService: ReduxService, serviceInstance: any, propertyName: string, action: any, reducer: any) {\n    const actionName = `${serviceInstance.constructor.path}.${propertyName}`;\n    const fn = serviceInstance[propertyName]();\n    fn.useOpenAction = !!action.useOpenAction;\n    reducer[actionName] = fn;\n    serviceInstance[propertyName] = (payload: any) => {\n      reduxService.dispatch({ type: actionName, payload });\n    };\n  }\n\n  /**\n   * Add a reducer.\n   */\n  private addReducer(reduxService: ReduxService, serviceInstance: any, reducer: any) {\n    const path = serviceInstance.constructor.path;\n    const initial = serviceInstance.constructor.initial || {};\n    const reducerMethod = (state: any = initial, action: Action) => {\n      const op = reducer[action.type];\n      if (!op) { return state; }\n      if (op.useOpenAction) { return op(state, action); }\n\n      const newState = cloneDeep(state);\n      const payload = cloneDeep(action.payload);\n      op(newState, payload);\n      return newState;\n\n    };\n    reduxService.add(path, reducerMethod);\n  }\n\n  /**\n   * Trigger the safe epics.\n   * @param action\n   */\n  public safeDispatch(reduxService: ReduxService, action: Action) {\n\n    if (!action || !action.type) {\n      console.warn('Redux safe dispatch called without action');\n      return;\n    }\n\n    const epics = this.epic[action.type];\n    if (epics) {\n      epics.forEach(epic => epic(action.payload)\n        .pipe(take(1))\n        .subscribe(reply => reduxService.dispatch(reply))\n      );\n    }\n\n  }\n\n}\n"]}