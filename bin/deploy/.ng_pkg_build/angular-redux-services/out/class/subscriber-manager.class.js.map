{"version":3,"file":"subscriber-manager.class.js","sourceRoot":"","sources":["subscriber-manager.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { BehaviorSubject, Subscription } from 'rxjs';\nimport { get, isEqual } from 'lodash';\nimport { ReduxSubject } from './redux-subject.class';\n\nexport class SubscriberManger {\n\n  /**\n   * Tracks the active selections. Each subject gets updated\n   * when broadcast is called.\n   */\n  private selections: { path?: BehaviorSubject<any> } = { };\n\n  /**\n   * Create a subscriber manager\n   * @param getState method that returns the full state;\n   */\n  constructor(private getState: () => any) {\n\n  }\n\n  /**\n   * Returns a redux observable for the state slice.\n   * @param path\n   */\n  public select<T>(path: string): BehaviorSubject<T> {\n\n    let sliceSub: Subscription;\n    const slice = this.setSlice<T>(path);\n\n    const onActivate = () => {\n      slice.links++;\n      sliceSub = slice.subscribe((reply: T) => reduxSubject.next(reply));\n    };\n\n    const onDeactivate = () => {\n      sliceSub.unsubscribe();\n      slice.links--;\n      if (!slice.links) {\n        this.removeSlice(path);\n      }\n    };\n\n    const reduxSubject = new ReduxSubject<T>(slice.value, onActivate, onDeactivate);\n    return reduxSubject;\n\n  }\n\n  /**\n   * Sets the state slice.\n   * @param path\n   */\n  private setSlice<T>(path: string): BehaviorSubject<T> & { links?: number } {\n    const sub = this.selections[path];\n    if (sub) { return sub; }\n\n    const value = get(this.getState(), path);\n    const slice: BehaviorSubject<T> & { links?: number } = new BehaviorSubject(value);\n    slice.links = 0;\n\n    this.selections[path] = slice;\n    return slice;\n  }\n\n  /**\n   * Clear the slice.\n   * @param path\n   */\n  private removeSlice(path: string) {\n    delete this.selections[path];\n  }\n\n  /**\n   * Return the subscriber middleware.\n   */\n  public createMiddleware() {\n    return store => next => action => {\n      const result = next(action);\n      this.broadcast(this.getState());\n      return result;\n    };\n  }\n\n  /**\n   * Update all tracked observers.\n   * @param state\n   */\n  private broadcast(state) {\n    if (!this.selections) { return; }\n\n    const keys = Object.keys(this.selections);\n    for (let i = keys.length - 1; i > -1; i--) {\n      const path = keys[i];\n      const subject = this.selections[path];\n      const stateValue = get(state, path);\n      if (!isEqual(stateValue, subject.getValue())) {\n        subject.next(stateValue);\n      }\n\n    }\n  }\n\n}\n"]}