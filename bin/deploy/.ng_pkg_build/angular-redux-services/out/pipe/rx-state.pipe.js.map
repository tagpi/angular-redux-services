{"version":3,"file":"rx-state.pipe.js","sourceRoot":"","sources":["rx-state.pipe.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,IAAI,EAAiB,iBAAiB,EAAa,MAAM,eAAe,CAAC;AAClF,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAMxD,MAAM;;;;;IAIJ,YAAoB,iBAAoC,EAAU,YAA0B;QAAxE,sBAAiB,GAAjB,iBAAiB,CAAmB;QAAU,iBAAY,GAAZ,YAAY,CAAc;QAC1F,IAAI,CAAC,KAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACpD;;;;;IAED,SAAS,CAAC,KAAa;QACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KAC9D;;;;IAED,WAAW;QACT,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;KAC1B;;;YAlBF,IAAI,SAAC;gBACJ,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,KAAK;aACZ;;;;YAN6B,iBAAiB;YACtC,YAAY","sourcesContent":["import { AsyncPipe } from '@angular/common';\nimport { Pipe, PipeTransform, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { ReduxService } from '../service/redux.service';\n\n@Pipe({\n  name: 'rxState',\n  pure: false\n})\nexport class RxStatePipe implements PipeTransform, OnDestroy {\n\n  async: AsyncPipe;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef, private reduxService: ReduxService) {\n    this.async = new AsyncPipe(this.changeDetectorRef);\n  }\n\n  transform(value: string): any {\n    return this.async.transform(this.reduxService.select(value));\n  }\n\n  ngOnDestroy () {\n    this.async.ngOnDestroy();\n  }\n\n}\n"]}