{"version":3,"file":"rx-action.decorator.js","sourceRoot":"","sources":["rx-action.decorator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAYA,MAAM,mBAAmB,aAAa,GAAG,KAAK,EAAE,iBAAiB,GAAG,KAAK;IACvE,MAAM,CAAC,UAAU,MAAM,EAAE,WAAmB,EAAE,UAA8B;QAC1E,MAAM,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG;YACrC,IAAI,EAAE,GAAG,WAAW,EAAE;YACtB,aAAa;SACd,CAAC;KACH,CAAC;CACH","sourcesContent":["/**\n * Configure a action for the state slice. The state and payload\n * parameters has been deep cloned. This output will be the parameter\n * state. It will not read the return output.\n * @param useOpenAction Truthy to use traditional redux pattern and full dispatched action.\n * @Action(useOpenReducer) fnName(payload: T) {\n *   return (state: State, action: Action) => {\n *     state.param1 = action.payload.param1;\n *     state.param2 = action.payload.param2;\n *   };\n * }\n */\nexport function rxAction(useOpenAction = false, useCompleteAction = false) {\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    target[propertyKey]['__rx__'] = target['__rx__'] || {};\n    target[propertyKey]['__rx__'].action = {\n      name: `${propertyKey}`,\n      useOpenAction\n    };\n  };\n}\n\n"]}