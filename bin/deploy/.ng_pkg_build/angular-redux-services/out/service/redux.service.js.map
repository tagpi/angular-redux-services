{"version":3,"file":"redux.service.js","sourceRoot":"","sources":["redux.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,WAAW,EAAS,OAAO,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AAGtF,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAC;AACrE,OAAO,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAIxD,MAAM;IA2BJ;6BAzBuB,KAAK;;;;wBAUJ;YACtB,gBAAgB,EAAE,CAAC,KAAK,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI;SACtD;QAcC,IAAI,CAAC,UAAU,GAAG,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;KAC7B;;;;;;;;IAQM,IAAI,CAAC,cAAc,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,EAAE,YAAY,GAAG,KAAK;;QAGpE,uBAAM,iBAAiB,GAAG,CAAC,CAAC,YAAY,IAAI,MAAM,CAAC,sCAAsC,CAAC,CAAC,IAAI,OAAO,CAAC;QACvG,uBAAM,gBAAgB,GAAG,iBAAiB,CAAC,eAAe,CACxD,GAAG,UAAU,EACb,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,CACnC,CAAC,CAAC;;QAGH,IAAI,CAAC,KAAK,GAAG,WAAW,CACtB,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC9B,cAAc,EACd,gBAAgB,CACjB,CAAC;;QAGF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;QAG1B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;;;;IASf,GAAG,CAAC,IAAI,EAAE,OAAO;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;;;;;IAOrD,QAAQ,CAAC,eAAoB;QAClC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;;;;;;IAM/B,QAAQ;QACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;;;;;;;IAOxB,QAAQ,CAAC,MAAc;QAC5B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;;;;;;;IAO/B,MAAM,CAAI,IAAY;QAC3B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;;YAtGvC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { combineReducers, createStore, Store, compose, applyMiddleware } from 'redux';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { SubscriberManger } from '../class/subscriber-manager.class';\nimport { MapManager } from '../class/map-manager.class';\nimport { Action } from '../model/action.model';\n\n@Injectable()\nexport class ReduxService {\n\n  public isInitialized = false;\n\n  /**\n   * Redux store.\n   */\n  private store: Store<any>;\n\n  /**\n   * Reducer list.\n   */\n  private reducers: any = {\n    '@redux-service': (state = {}, action) => action.type\n  };\n\n  /**\n   * Manages state sices into observables.\n   */\n  private subscriber: SubscriberManger;\n\n  /**\n   * Applies redux maps into the redux pattern.\n   */\n  private map: MapManager;\n\n\n  constructor() {\n    this.subscriber = new SubscriberManger(() => this.getState());\n    this.map = new MapManager();\n  }\n\n  /**\n   * Initializes the redux service\n   * @param preloadedState Initial state\n   * @param epics Global epics using redux-observables\n   * @param isProduction Adds devtools if non production\n   */\n  public init(preloadedState = {}, middleware = [], isProduction = false) {\n\n    // middleware\n    const composeMiddleware = (!isProduction && window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__']) || compose;\n    const loadedMiddleware = composeMiddleware(applyMiddleware(\n      ...middleware,\n      this.subscriber.createMiddleware()\n    ));\n\n    // create store\n    this.store = createStore(\n      combineReducers(this.reducers),\n      preloadedState,\n      loadedMiddleware\n    );\n\n    // service has been initialized\n    this.isInitialized = true;\n\n    // initialize map with newly created store\n    this.map.init(this);\n\n  }\n\n  /**\n   * Add a reducer.\n   * @param name Root path for the reducer (@search)\n   * @param reducer Reducer method (state, action) => state\n   */\n  public add(name, reducer) {\n    this.reducers[name] = reducer;\n    this.store.replaceReducer(combineReducers(this.reducers));\n  }\n\n  /**\n   * Registers a redux service instance.\n   * @param serviceInstance\n   */\n  public register(serviceInstance: any) {\n    this.map.add(this, serviceInstance);\n  }\n\n  /**\n   * Return the current state.\n   */\n  public getState(): any {\n    return this.store.getState();\n  }\n\n  /**\n   * Dispact an action.\n   * @param action\n   */\n  public dispatch(action: Action) {\n    this.store.dispatch(action);\n    this.map.safeDispatch(this, action);\n  }\n\n  /**\n   * Subscribe to a state slice\n   * @param path\n   */\n  public select<T>(path: string): BehaviorSubject<T> {\n    return this.subscriber.select(path);\n  }\n\n\n\n}\n"]}